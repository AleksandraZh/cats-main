[% PROCESS header.tti title = 'Формат заданий' %]
[%- MACRO opt BLOCK %]<sup><a href="#opt" title="Необязательный атрибут">o</a></sup>[% END -%]
[%- MACRO v11 BLOCK %]<sup><a href="#v11" title="С версии 1.1">1.1</a></sup>[% END -%]
[%- MACRO v12 BLOCK %]<sup><a href="#v12" title="С версии 1.2">1.2</a></sup>[% END -%]
[%- MACRO v13 BLOCK %]<sup><a href="#v13" title="С версии 1.3">1.3</a></sup>[% END -%]
[%- MACRO v14 BLOCK %]<sup><a href="#v14" title="С версии 1.4">1.4</a></sup>[% END -%]
[%- MACRO dv14 BLOCK %]<sup><a href="#dv14" title="Устарела с версии 1.4">&minus;1.4</a></sup>[% END -%]
[%- MACRO tag_in(t1, t2, m1, m2) BLOCK
%]<tt>&lt;<a name="[% t1 %]">[% t1 %]</a>&gt;[% IF t2 != '';
  IF m1 != '' %]</tt>[% m1 %]<br/><tt>[% ELSE %]<br/>[% END
%]&lt;<a href="#[% t2 %]">[% t2 %]</a>&gt;[% END %]</tt>[% m2;
END -%]
[%- MACRO tag_ref(t) BLOCK %]<tt>&lt;<a href="#[% t %]">[% t %]</a>&gt;</tt>[% END -%]
<h2>Версия 1.4</h2>

<p><a href="sample.zip">скачать пример пакета с заданием</a></p>
<p>Для хранения задачи используется ZIP-файл, в корне которого обязательно
должен быть ровно один XML-файл с описанием условия задачи и
некоторое множество дополнительных файлов с тестами, программами проверки и т.д.
</p>
 
<h2>Структура XML-файла с задачей</h2>

<table class="ft">
<col width="1%"/><col width="40%"><col width="*"/>
<tr>
  <th>Название тэга<br/>Тэг верхнего уровня</th> <th>Атрибуты</th> <th>Комментарии</th>
</tr>
<tr>
  <td>[% tag_in('CATS') %]</td>
  <td>version[% opt %] (по умолчанию "1.4")</td>
  <td>Обязательный внешний тэг</td>
</tr>
<tr>
  <td>[% tag_in('Problem', 'CATS') %]</td>
  <td>
    <ul>
      <li>title - заголовок задачи;</li>
      <li>lang[% opt %] - язык описания задачи;</li>
      <li>tlimit - лимит времени на прохождения одного теста (в секундах);</li>
      <li>mlimit[% v11 %] - лимит памяти на прохождение одного теста (в мегабайтах);</li>
      <li>author[% opt %] - автор;</li>
      <li>inputFile - имя входного файла;</li>
      <li>outputFile - имя выходного файла;</li>
      <li>difficulty[% opt %] - авторская оценка сложности задачи в баллах от (1 до 100);</li>
      <li>stdChecker[% opt %] [% dv14 %] - имя стандартной программы проверки;</li>
      <li>maxPoints[% opt %] [% v13 %] - максимальный балл за задачу, имеет приоритет перед суммой баллов по тестам</li>
    </ul>
  </td>
  <td>Стандартная программа проверки служит для сравнения выходного
    файла с файлом, содержащим ответ теста. Перечень стандартных программ проверки:
    <ul>
      <li>nums - проверяет совпадение целых чисел (4 байта - long int);</li>
      <li>floats2 - проверяет совпадение вещественных чисел (10 байт - long double);</li>
      <li>strs - проверяет совпадение строк до 256 символов;</li>
      <li>longnums - проверяет совпадение длинных целых чисел (до 10000 цифр);</li>
      <li>longstrs - проверяет совпадение длинных строк (до 10000 символов);</li>
    </ul>
  </td>
</tr>
<tr>
  <td>[% tag_in('Keyword', 'Problem') %]</td>
  <td>
      <ul><li>code - код ключевого слова</li></ul>
  </td>
  <td>Код ключевого слова должен быть известен системе.</td>
</tr>
<tr>
  <td>[% tag_in('ProblemStatement', 'Problem') %]</td>
  <td>Описание условия задачи в формате STML.</td>
  <td>&nbsp;</td>
</tr>
<tr>
  <td>[% tag_in('ProblemConstraints', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Описание ограничений на входные данные задачи в формате STML.</td>
</tr>
<tr>
  <td>[% tag_in('InputFormat', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Описание формата входного файла в формате STML.</td>
</tr>
<tr>
  <td>[% tag_in('OutputFormat', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Описание формата выходного файла в формате STML.</td>
</tr>
<tr>
  <td>[% tag_in('Checker', 'Problem') %]</td>
  <td>
    <ul>
      <li>name - идентификатор объекта [% tag_ref('Checker') %] (произвольная текстовая строка);</li>
      <li>src[% opt %] - путь к файлу с исходным кодом;</li>
      <li>de_code[% opt %] - код среды разработки.</li>
      <li>export[% opt %] [% v14 %] - глобальный идентификатор.</li>
    </ul>
  </td>
  <td>
    Описание проверяющей программы. Данный тэг игнорируется, если в описании задачи присутствует атрибут stdChecker.
    "src" - задает путь к файлу, относительно корня архива. Допускается использование вложенных каталогов.
    Регистр пути к файлу должен совпадать с регистром имен файлов в архиве.
    Перечень стандартных кодов сред разработки:
    <ul>
      <li>1[% v12 %] - None (h;inc)</li>
      <li>101 - Cross-platform C/C++ compiler (cpp;c)</li>
      <li>102 - GNU C++ (cc;cxx)</li>
      <li>103 - MS Visual C++ 7.0 (cpp;c)</li>
      <li>104 - Borland C++ 3.1 (cpp;c)</li>
      <li>201 - Borland Pascal (pas)</li>
      <li>202 - Free Pascal 1.0.10 (pp;pas)</li>
      <li>203 - Borland Delphi 7.0 (dpr)</li>
      <li>301 - Quick Basic 4.5 (bas)  (поддерживается не полностью)[% v11 %]</li>
      <li>401 - Java 1.5 (java)[% v13 %]</li>
    </ul>

    Если код среды разработки не указан, то он определяется по расширению файла,
    в порядке приоритета, заданного списком стандартных кодов сред разработки.
  </td>
</tr>
<tr>
  <td>[% tag_in('Picture', 'Problem') %]</td>
  <td>
    <ul>
      <li>name - идентификатор объекта [% tag_ref('Picture') %] (произвольная текстовая строка);</li>
      <li>src[% opt %] - путь к файлу с изображением.</li>
    </ul>
  </td>	
  <td>Описание картинки, встраиваемой в текст задачи.</td>
</tr>
<tr>
  <td>[% tag_in('Solution', 'Problem') %]</td>
  <td>	
    <ul>
      <li>name - идентификатор объекта [% tag_ref('Solution') %];</li>
      <li>src[% opt %] - путь к файлу с исходным кодом;</li>
      <li>de_code[% opt %] - код среды разработки.</li>
      <li>export[% opt %] [% v14 %] - глобальный идентификатор.</li>
    </ul>
  </td>	
  <td>Описание эталонного решения.</td>
</tr>
<tr>
  <td>[% tag_in('Generator', 'Problem') %]</td>
  <td>	
    <ul>   
      <li>name - идентификатор объекта [% tag_ref('Generator') %];</li>
      <li>src[% opt %] - путь к файлу с исходным кодом;</li>
      <li>de_code[% opt %] - код среды разработки;</li>
      <li>outputFile[% opt %] [% v12 %] - имя выходного файла.</li>
      <li>export[% opt %] [% v14 %] - глобальный идентификатор.</li>
    </ul>                  
  </td>
  <td>Описание генератора тестов. Генератор должен создать файл,
    имя которого заданно в атрибуте <tt>outputFile</tt>. Этот файл используется в качестве
    исходных данных в теге [% tag_ref('In') %].
    По умолчанию имя файла должно совпадать со значением атрибута <tt>inputFile</tt> тега [% tag_ref('Problem') %].
    Специальное значение <tt>outputFile="*STDOUT"</tt> означает, что генератор выдаёт тест на стандартный вывод.
  </td>
</tr>
<tr>
  <td>[% tag_in('GeneratorRange', 'Problem', v12) %]</td>
  <td>
    <ul>
      <li>from - порядковый номер первого генератора;</li>
      <li>to - порядковый номер последнего генератора;</li>
      <li>name - идентификатор объекта [% tag_ref('Generator') %];</li>
      <li>src[% opt %] - путь к файлу с исходным кодом;</li>
      <li>de_code[% opt %] - код среды разработки.</li>
      <li>outputFile[% opt %] [% v12 %] - имя выходного файла.</li>
      <li>export[% opt %] [% v14 %] - глобальный идентификатор.</li>
    </ul>
  </td>
  <td>В атрибутах тега [% tag_ref('GeneratorRange') %] допускается
    использование контекстных переменных:
    <ul>
      <li><tt>%n</tt> - номер текущего генератора;</li>
      <li><tt>%0n</tt> - номер текущего генератора с лидирующим нулем.</li>
    </ul>
    Например:<br/>
    <tt>&lt;GeneratorRange from="1" to="10" name="g%0n" src="gen%0n.pas"/&gt</tt>
  </td>
</tr>
<tr>
  <td>[% tag_in('Test', 'Problem') %]</td>
  <td>rank - порядковый номер теста.</td>
  <td>Содержит описание тестов. 
  В задаче должны присутствовать тесты со значениями rank от 1 до некоторого N.
  Если ни одного теста нет, то любое компилируемое решение будет принято как верное.
  </td>
</tr>
<tr>
  <td>[% tag_in('Module', 'Problem', v12) %]</td>
  <td>	
    <ul>   
      <li>name - идентификатор объекта [% tag_ref('Module') %];</li>
      <li>src - путь к файлу с исходным кодом;</li>
      <li>de_code[% opt %] - код среды разработки.</li>
      <li>type - вид модуля (generator, checker, solution).</li>
      <li>export[% opt %] [% v14 %] - глобальный идентификатор.</li>
    </ul>
  </td>
  <td>Описание модуля. Файлы модулей распаковываются и компилируются вместе с каждым объектом
    соответствующего вида. Для модулей, отдельная компиляция которых не требуется, следует указывать
    среду разработку "None" (de_code="1").
    Порядок компиляции модулей совпадает с порядком перечисления в файле описания задачи.
  </td>
</tr>
<tr>
  <td>[% tag_in('Import', 'Problem', v14) %]</td>
  <td>	
    <ul>   
      <li>guid [% v14 %] - глобальный идентификатор импортируемого объекта.</li>
      <li>type - тип импортируемого объекта модуля (generator, checker, solution).</li>
    </ul>
  </td>
  <td>Импорт объекта из существующей задачи. Поиск объекта осуществляется по guid.
    Если указан атрибут type, проверяется соответствие тип объекта.
    Эффект от импорта объекта эквивалентен добавлению его копии в пакет с задачей.
  </td>
</tr>
<tr>
  <td>[% tag_in('TestRange', 'Problem', v11) %]</td>
  <td>
    <ul>
      <li>from - порядковый номер первого теста;</li>
      <li>to - порядковый номер последнего теста.</li>
    </ul>
  </td>	
  <td>Внутри тега [% tag_ref('TestRange') %] допускается использование контекстных переменных:
    <ul>
      <li><tt>%n</tt> - номер текущего теста;</li>
      <li><tt>%0n</tt> - номер текущего теста с лидирующим нулем.</li>
    </ul>
    Например:<pre>&lt;TestRange from="1" to="10"&gt;
  &lt;In src="%0n.in"/&gt;&lt;Out use="solution"/&gt;
&lt;/TestRange&gt</pre></td>
</tr>
<tr>
  <td>[% tag_in('In', 'Test') %], [% tag_ref('TestRange'); v11 %]</td>
  <td>
    <ul>  
      <li>use[% opt %] - идентификатор объекта [% tag_ref('Generator') %];</li>
      <li>param[% opt %] - параметры, передаваемые генератору тестов при запуске;</li>
      <li>src[% opt %] - путь к входному файлу теста (если не указан атрибут use).</li>
    </ul> 
  </td>
  <td>Описание входного файла теста.
    Если указан атрибут "use", то перед тестированием решения
    будет выполнена программа генерации входного файла теста, которая должна создать файл теста.
  </td>
</tr>
<tr>
  <td>[% tag_in('Out', 'Test') %], [% tag_ref('TestRange'); v11 %]</td>
  <td>
    <ul>
      <li>use[% opt %] - идентификатор объекта [% tag_ref('Solution') %];</li>
      <li>src[% opt %] - путь к выходному файлу теста (если не указан атрибут use).</li>
    </ul>
  </td>
  <td>Если указан атрибут "use", то перед тестированием решения на данном входном файле
    будет выполнено эталонное решение для генерации выходного файла теста.
  </td>
</tr>
<tr>
  <td>[% tag_in('Sample', 'Problem') %]</td>
  <td>
    rank - порядковый номер теста с примером (не пересекается с аналогичным атрибутом тега <Test>).
  </td>
  <td>Описание демонстрационного теста</td>
</tr>
<tr>
  <td>[% tag_in('SampleIn', 'Sample') %]</td>
  <td>&nbsp;</td>
  <td>
    Содержит текст с примером входного файла. Отступы и переносы задаются также как и в текстовом файле.
  </td>
</tr>
<tr>
  <td>[% tag_in('SampleOut', 'Sample') %]</td>
  <td>&nbsp;</td>
  <td>Содержит текст с примером выходного файла.</td>
</tr>
</table>	

<a name="opt"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>o</sup></a>
  Атрибуты, помеченные этим знаком, являются необязательными.</p>
<a name="v11"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>1.1</sup></a>
  Данная возможность присутствует начиная с версии 1.1.</p>
<a name="v12"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>1.2</sup></a>
  Данная возможность присутствует начиная с версии 1.2.</p>
<a name="v13"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>1.3</sup></a>
  Данная возможность присутствует начиная с версии 1.3.</p>
<a name="v14"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>1.4</sup></a>
  Данная возможность присутствует начиная с версии 1.4.</p>
<a name="dv14"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>&minus;1.4</sup></a>
  Данная возможность считается устаревшей начиная с версии 1.4.</p>


<h2>Описание формата STML (Simple Text Markup Language)</h2>

<p>Формат STML - упрощенное подмножество HTML. В STML определены следующие тэги:</p>

<table class="ft">
<tr><th>Название тэга</br>Тэг верхнего уровня</th><th>Атрибуты</th><th>Комментарии</th></tr>
<tr><td>[% tag_in('img') %]</td>
  <td>
    <ul>
      <li>picture - идентификатор объекта [% tag_ref('Picture') %];</li>
      <li>width[% opt %] - ширина изображения (в пикселях);</li>
      <li>height[% opt %] - высота изображения (в пикселях);</li>
      <li>align[% opt %] - метод выравнивание изображения<br/>
        (Может принимать значения: left - выравнивание по левому краю, right - по правому краю).</li>
    </ul>
  </td>	
  <td>Вставка картинки</td>
</tr>
<tr><td>[% tag_in('i') %]</td>
  <td>&nbsp;</td>
  <td>Выделение курсивом.</td>
</tr>
<tr><td>[% tag_in('b') %]</td>
  <td>&nbsp;</td>
  <td>Выделение жирным шрифтом.</td>
</tr>
<tr><td>[% tag_in('sup') %]</td>
  <td>&nbsp;</td>
  <td>Перевод в надстрочный индекс.</td>
</tr>
<tr><td>[% tag_in('sub') %]</td>
  <td>&nbsp;</td>
  <td>Перевод в подстрочный индекс.</td>
</tr>
<tr><td>&lt;table&gt;</td>
  <td>
    <ul>
      <li>border[% opt %] - 1 - граница присутствует,<br/>
        0 - в противном случае (по умолчанию граница присутствует);</li>
      <li>width[% opt %] - ширина таблицы.</li>
    </ul>
  </td>
  <td>Таблица.</td>
</tr>
<tr><td>[% tag_in('tr', 'table') %]</td>
  <td>&nbsp;</td>
  <td>Ряд таблицы.</td>
</tr>
<tr><td>[% tag_in('td', 'tr') %]</td>
  <td>&nbsp;</td>
  <td>Ячейка таблицы.</td>
</tr>
</table>
[% PROCESS footer.tti %]