[% PROCESS includes/header.tti %]
[% tex_styles %]
[% IF mathjax %]
<script type="text/javascript">
function setTex() {
[%#
    CATS::TeX::Lite preserves spaces between identifiers.
    Emulate that for compatibility by replacing such spaces with "\,".
    Future problems should use "\," or "\ " explicitly.
    Since JavaScript RegExp does not support lookbehind, use magic
    to distinguish identifiers (abc) from TeX commands (\abc).
-%]
    var tex = $(this);
    var magic = '~!!!~';
    var t = tex.attr('title');
    t = t.replace(/(\\[a-zA-Z]+)/g, '$1' + magic);
    t = t.replace(/([a-zA-Z0-9},])\s+(?=[a-zA-Z])/g, '$1\\,');
    t = t.replace(new RegExp(magic, 'g'), '');
    tex.html("\\(" + t + '\\)');
}
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        TeX: {
          Macros: { deg: '^\\circ' }
        },
        'HTML-CSS': { scale: 85 },
        SVG: { scale: 85 },
        CommonHTML: { scale: 85 },
        tex2jax: { ignoreClass: 'problem_text', processClass: 'TeX' },
        skipStartupTypeset: true
    });
[%#
    MathJax.Hub.Startup.signal.Interest(function (message) { console.log("Startup: " + message); });
    MathJax.Hub.signal.Interest(function (message) { console.log("Hub: " + message); });
-%]
    MathJax.Hub.Register.StartupHook('onLoad', function () {
        $('div.problem_text').each(function() {
            [%# Convert math one problem at a time as a compromise between speed and stability. -%]
            var d = $(this);
            MathJax.Hub.Queue(
                function() { d.find('span.TeX').each(setTex); },
                [ 'Typeset', MathJax.Hub, this ]);
        });
    });
</script>
<script type="text/javascript" src="https://cdn.rawgit.com/mathjax/MathJax/2.7.1/MathJax.js?config=TeX-AMS_CHTML"></script>
<script type="text/javascript">window.MathJax || document.write('<script src="js/lib/MathJax/MathJax.js?config=TeX-AMS_CHTML"><\/script>')</script>
<script type="text/javascript" src="js/lib/jquery.min.js"></script>
[% END %]
</head>
<body>
[% FOREACH p IN problems; PROCESS "lang/${p.lang}/problem_text_p.html.tt" UNLESS capt.problem_text.item(p.lang); END; %]
[% FOREACH p IN problems; c = capt.problem_text.item(p.lang) %]
<div class="problem_text" [% UNLESS loop.first %]style="page-break-before: always"[% END %]>
  <a name="pr[% p.code || p.id %]"></a>

  <h2>[% "${c.problem} ${p.code}. " IF p.code; p.title | html %]</h2>
  [% IF p.author; c.author %]: [% p.author | html %]<br/><br/>[% END %]
  <table class="nobr">
  <tr>
    <td width="1%">[% c.input_file %]:</td><td>[% (p.input_file == '*STDIN' ? c.standard_input : p.input_file) | html %]</td>
    <td>&nbsp;</td>
    <td width="1%">[% c.time_limit %]:</td><td>[% p.time_limit %] [% c.seconds %]</td></tr>
  <tr>
    <td>[% c.output_file %]:</td><td>[% (p.output_file == '*STDOUT' ? c.standard_output : p.output_file) | html %]</td>
    <td>&nbsp;</td>
    <td>[% c.memory_limit %]:</td><td>[% p.memory_limit %] [% c.megabytes %]</td></tr>
  [% IF p.write_limit || p.show_points %]
  <tr>
    [% IF p.show_points %]
    <td>[% c.max_points %]:</td><td>[% p.max_points %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
    <td>&nbsp;</td>
    [% IF p.write_limit %]
    <td>[% c.write_limit %]:</td><td>[% p.write_limit %] [% c.bytes %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
  </tr>
  [% END %]
  </table>
  [% IF p.keywords ; c.keywords %]: [% p.keywords %]<br/><br/>[% END %]
  [%- MACRO section(name) IF p.item(name) %]
    <h3>[% c.item(name) %]</h3>
    [% p.item(name) %]
  [% END -%]
  [% section('statement') %]
  [% IF p.explanation %]
    [% section('pconstraints') %]
    [% section('explanation') %]
  [% ELSE %]
    [% section('input_format') %]
    [% IF p.formal_input %]
      <h3>[% c.formal_input %]</h3>
      <pre>[% p.formal_input %]</pre>
    [% END %]
    [% section('output_format') %]
    [% section('pconstraints') %]
    [% IF p.samples.size %]
      <h3>[% c.sample_tests %]</h3>
      <table class="sample" id="sample[% p.id %]">
      <tr><th>No.</th>
      <th>[% IF p.input_file == '*STDIN'; c.standard_input; ELSE; c.input_file %] (<tt>[% p.input_file | html %]</tt>)[% END %]</th>
      <th>[% IF p.output_file == '*STDOUT'; c.standard_output; ELSE; c.output_file %] (<tt>[% p.output_file | html %]</tt>)[% END %]</th></tr>
      [% FOREACH s IN p.samples %]
      <tr>
        <td>[% s.rank %]</td>
        <td><pre><code>[% s.in_file %]</code></pre></td>
        <td><pre><code>[% s.out_file %]</code></pre></td>
      </tr>
      [% END %]
      </table>
    [% END %]
  [% END %]
  <hr>
</div>
[% END %]
<script type="text/javascript" src="docs/std/whitespace.js"></script>
<script type="text/javascript">ws_init('spaces', [[% FOREACH p IN problems; p.id; ',' UNLESS loop.last; END %]])</script>
[% PROCESS includes/timing.tti %]
</body>
</html>
