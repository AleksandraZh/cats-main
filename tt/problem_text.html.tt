[% PROCESS includes/header.tti %]
[% PROCESS includes/html.tti %]
[% tex_styles %]
[% IF mathjax %]
<script type="text/javascript">
function set_tex() {
[%#
  CATS::TeX::Lite preserves spaces between identifiers.
  Emulate that for compatibility by replacing such spaces with "\,".
  Future problems should use "\," or "\ " explicitly.
  Since JavaScript RegExp does not support lookbehind, use magic
  to distinguish identifiers (abc) from TeX commands (\abc).
-%]
  var tex = $(this);
  tex.data({ lite: tex.html() });
  var magic = '~!!!~';
  var t = tex.attr('title');
  t = t.replace(/(\\[a-zA-Z]+)/g, '$1' + magic);
  t = t.replace(/([a-zA-Z0-9},])\s+(?=[a-zA-Z])/g, '$1\\,');
  t = t.replace(new RegExp(magic, 'g'), '');
  tex.html("\\(" + t + '\\)');
}

function unset_tex() {
  var tex = $(this);
  var lite = tex.data().lite;
  if (lite)
    tex.html(lite);
}

function apply_mathjax(p) {
  MathJax.Hub.Queue(
    function() { p.find('span.TeX').each(set_tex); },
    [ 'Typeset', MathJax.Hub, p[0] ]);
}
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  TeX: {
    Macros: { deg: '^\\circ' }
  },
  'HTML-CSS': { scale: 100 },
  SVG: { scale: 100 },
  CommonHTML: { scale: 100 },
  tex2jax: { ignoreClass: 'problem_text', processClass: 'TeX' },
  skipStartupTypeset: true
});
[%#
MathJax.Hub.Startup.signal.Interest(function (message) { console.log("Startup: " + message); });
MathJax.Hub.signal.Interest(function (message) { console.log("Hub: " + message); });
-%]
MathJax.Hub.Register.StartupHook('onLoad', function () {
  [%# Convert math one problem at a time as a compromise between speed and stability. -%]
  $('div.problem_text').each(function() {
    var p = $(this);
    if (!p.find('.basic_math')[0].checked)
      apply_mathjax(p);
  });
});
</script>
<script type="text/javascript" src="https://cdn.rawgit.com/mathjax/MathJax/2.7.1/MathJax.js?config=TeX-AMS_CHTML"></script>
<script type="text/javascript">window.MathJax || document.write('<script src="js/lib/MathJax/MathJax.js?config=TeX-AMS_CHTML"><\/script>')</script>
<script type="text/javascript" src="js/lib/jquery.min.js"></script>
[% END %]
<style>
  a.problem_menu_trigger { font-size: small; color: inherit; padding: 1px 3px; background-color: #eeeeee; }
  a.problem_menu_trigger:hover { font-size: medium; }
  div.problem_menu { display: none; width: 100%; background-color: #eeeeee; }
  div.problem_menu ul { list-style-type: none; padding: 0; }
  div.problem_menu ul li { display: inline-block; padding: 3px 10px; border-right: 1px solid; }
  div.problem_menu input[type=checkbox] { display: none; }
  div.problem_menu input[type=checkbox] + span:after { content: '\2610'; }
  div.problem_menu input[type=checkbox]:checked + span:after { content: '\2611'; }
  div.problem_menu li.langs { font-weight: bold; }
  div.problem_menu li.langs a { font-weight: normal; }
  div.problem_text table.problem_header { width: 100%; }
</style>
</head>
<body>
[% FOREACH p IN problems; PROCESS "lang/${p.lang}/problem_text_p.html.tt" UNLESS capt.problem_text.item(p.lang); END; %]
[% FOREACH p IN problems; c = capt.problem_text.item(p.lang) %]
<div class="problem_text" id="p[% p.id %]" [% UNLESS loop.first %]style="page-break-before: always"[% END %]>
  <a name="pr[% p.code || p.id %]"></a>

  <h2>[% "${c.problem} ${p.code}. " IF p.code; p.title | html %] <a class="jsonly problem_menu_trigger" href="#">&#x2261;</a></h2>
  <div class="jsonly problem_menu"><ul>
    <li><a class="problem_list_link" href="[% p.href_problem_list %]">[% c.problem_list %]</a></li>
    <li><label><input type="checkbox" class="whitespace"><span></span> [% c.visible_spaces %]</label></li>
    <li><label><input type="checkbox" class="basic_math"><span></span> [% c.basic_math %]</label></li>
    [% IF problems.size == 1 && p.langs && p.langs.size > 1 -%]
    <li class="langs">[% FOREACH lang IN p.langs; maybe_href(lang == p.lang ? '' : '#', lang); ' '; END %]</li>
    [%- END %]
  </ul></div>
  <table class="problem_header">
  [% IF p.author %]<tr><td class="narrow nobr">[% c.author %]:</td><td colspan="4">[% p.author | html %]</td></tr>[% END %]
  <tr>
    <td class="narrow nobr">[% p.interactive_io ? c.input_output : c.input_file %]:</td>
    <td>[% p.interactive_io ? c.interactive : (p.input_file == '*STDIN' ? c.standard_input : p.input_file) | html %]</td>
    <td>&nbsp;</td>
    <td class="narrow nobr">[% c.time_limit %]:</td><td>[% p.time_limit %] [% c.seconds %]</td></tr>
  <tr>
    <td class="narrow nobr">[% p.interactive_io ? '' : c.output_file _ ':' %]</td>
    <td>[% p.interactive_io ? '' : (p.output_file == '*STDOUT' ? c.standard_output : p.output_file) | html %]</td>
    <td>&nbsp;</td>
    <td class="narrow nobr">[% c.memory_limit %]:</td><td>[% p.memory_limit %] [% c.megabytes %]</td></tr>
  [% IF p.write_limit || p.show_points %]
  <tr>
    [% IF p.show_points %]
    <td class="narrow nobr">[% c.max_points %]:</td><td>[% p.max_points %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
    <td>&nbsp;</td>
    [% IF p.write_limit %]
    <td class="narrow nobr">[% c.write_limit %]:</td><td>[% p.write_limit %] [% c.bytes %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
  </tr>
  [% END %]
  [% IF p.keywords %]<tr><td class="narrow nobr">[% c.keywords %]:</td><td colspan="4">[% p.keywords %]</td></tr>[% END %]
  </table>
  [%- MACRO section(name, caption) IF p.item(name) %]
    <h3>[% c.item(caption || name) %]</h3>
    [% p.item(name) %]
  [% END -%]
  [% section('statement') %]
  [% IF p.explanation %]
    [% section('pconstraints') %]
    [% section('explanation') %]
  [% ELSE %]
    [% section('input_format', p.input_file == '*STDIN' ? 0 : 'input_file_format') %]
    [% IF p.formal_input %]
      <h3>[% c.formal_input %]</h3>
      <pre>[% p.formal_input %]</pre>
    [% END %]
    [% section('output_format', p.output_file == '*STDOUT' ? 0 : 'output_file_format') %]
    [% section('pconstraints') %]
    [% IF p.samples.size %]
      <h3>[% c.sample_tests %]</h3>
      <table class="sample" id="sample[% p.id %]">
      <tr><th>[% c.sample_number %]</th>
      <th>[% IF p.input_file == '*STDIN'; c.standard_input; ELSE; c.input_file %] (<code>[% p.input_file | html %]</code>)[% END %]</th>
      <th>[% IF p.output_file == '*STDOUT'; c.standard_output; ELSE; c.output_file %] (<code>[% p.output_file | html %]</code>)[% END %]</th></tr>
      [% FOREACH s IN p.samples %]
      <tr>
        <td>[% s.rank %]</td>
        <td><pre><code>[% s.in_file | html %]</code></pre></td>
        <td><pre><code>[% s.out_file | html %]</code></pre></td>
      </tr>
      [% END %]
      </table>
    [% END %]
  [% END %]
  <hr>
</div>
[% END %]
<script type="text/javascript">
$('.problem_menu_trigger').click(function() { $(this).parent().next().toggle(); return false; });

var sid = (new RegExp('sid=([a-zA-Z0-9]{30})')).exec(window.location.href);
if (sid) {
  sid = sid[1];
  $('.problem_list_link').each(function() { this.href += ';sid=' + sid; });
}

function toggle_whitespace() {
  var p = $(this).parents('.problem_text');
  var ws = this.checked;
  p.find('.sample code').each(function() {
    var t = $(this).text();
    if (ws)
      t = t.replace(/ /g, '\u2423');
    else
      t = t.replace(/\u2423/g, ' ');
    $(this).text(t);
  });
}

$('.problem_text div.problem_menu input.whitespace').click(toggle_whitespace).each(toggle_whitespace);
$('.basic_math').click(function() {
  var p = $(this).parents('.problem_text');
  if (this.checked)
    p.find('span.TeX').each(unset_tex);
  else
    apply_mathjax(p);
});

$('.problem_text div.problem_menu li.langs a').click(function() {
  var p = document.location.pathname;
  if (p.substring(p.length - 5) === '.html') {
    [%# Static page. %]
    var n = '-pl-' + this.innerText;
    document.location.pathname =
      p.indexOf('-pl-') < 0 ? p.replace('.html', n + '.html') : p.replace(/-pl-[a-z]+/, n);
  }
  else {
    var s = document.location.search;
    document.location.search =
      s.indexOf('pl=') < 0  ? s + ';pl=' + this.innerText : s.replace(/pl=[a-z]+/, 'pl=' + this.innerText);
  }
});

</script>
[% PROCESS includes/timing.tti %]
</body>
</html>
